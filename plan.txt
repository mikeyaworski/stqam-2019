updated for 2019, 2x/week

## Introduction and definitions (defects, faults, failures) (1 week: L1-3)

L1: introduction
L2: faults, errors, failures; dealing with an imperfect world; testing vs debugging
L3: in-class exercise on faults/errors/failures; validating a test suite---line intersection

L3 is (M) January 9.

## Defining Test Suites (4 weeks: L4-L16)

L4: static vs dynamic/"complete testing"/test cases/observability&controlability/test requirements/quantifying coverage/black-box vs white-box
L5: open-ended exploratory testing (http://katrinatester.blogspot.com.au/2016/12/the-testing-pendulum-finding-balance-in.html)
L6, L7, L8: statement/branch coverage (during L8, skipped to L9/L10 for A1 material and then back to L8)
L9: Selenium
L10: REST [finished on 28 Jan]

L11: graph-based models/design documentation (round trips) [30 Jan]

L12, L13: automatically/programmatically generating test suites -- grammars

L14: how good can your test suite be? JUnit / mutation

https://avandeursen.com/2012/12/21/line-coverage-lessons-from-junit/

L14/L15/L16/L17: how good? mutation -> PIT for Java (old L18/L19/L20)

L16 is (W) Feb 8.

## Engineering test suites (L17-25)

L18: why write tests?
https://hackernoon.com/treat-yourself-e55a7c522f71

on test automation (http://www.ontestautomation.com/not-so-useful-metrics-in-test-automation/) At its heart, test automation is – or at least should be – meant to increase the effectiveness of testing efforts.

L19: Selenium, web testing (L34), Page object design pattern

http://www.seleniumhq.org/docs/06_test_design_considerations.jsp#chapter06-reference
https://martinfowler.com/bliki/PageObject.html

https://developers.redhat.com/blog/2017/02/13/testing-testing-gcc/

L20: answer questions about midterm;

midterm is after L20

[reading week, A2 due at end of reading week]

L21: must-beliefs vs may-beliefs, coverity
L22: more on must-beliefs vs may-beliefs, given by derek rayside
L23: mike godfrey on clones

L24: regression testing (old L34)

L25: unit tests, test refactoring (old L30), refactoring code to be testable (old L36---RPCs, RESTful APIs, micro-services), badly designed tests (old L35)
L26 is Friday, March 10
L26: mock objects (old L30) continuous integration (Travis), flaky tests, hermetic tests
L27: testing infrastructure/DevOps (see also P4P L35)
http://nerds.airbnb.com/testing-at-airbnb/

https://puppet.com/blog/hitchhikers-guide-to-testing-infrastructure-as-and-code
https://martinfowler.com/articles/serverless.html
https://medium.com/@hichaelmart/lambci-4c3e29d6599b
https://about.gitlab.com/2015/02/03/7-reasons-why-you-should-be-using-ci/

## Tools for V&V (L28-34)

manual "tools":

L28: code review
http://web.mit.edu/6.005/www/fa15/classes/04-code-review/
https://blog.fogcreek.com/increase-defect-detection-with-our-code-review-checklist-example/

L29: reporting bugs (old L28) = march 17

L30: PMD out-of-the-box/XPath


ECE FYDP on March 21

L31: PMD on java / linters

L32: static vs dynamic analysis, static analysis I


static analysis I [fewer tools, more depth] [concurrency, old L10] [aComment, old L11]
L32: static analysis II [type systems, immutability, compiler warnings, software model checking, JML tools. Coverity, FindBugs]
L33: static analysis III [FB Infer / Clang address sanitizer] 
L34: dynamic analysis I [assertions, race detectors, valgrind & friends]


L35: dynamic analysis II [bugfinding]
L36: dynamic analysis III

A3 due on March 24 (L32)

SE FYDP on March 28

info:

tools (old L11, L12)- Korat, JPF, FindBugs, Daikon, ESC/Java, valgrind, cppcheck, 
    clang static analyzer, spling, pex, klee, coverity, grammatech codesonar, FB Infer

https://github.com/google/sanitizers/wiki/AddressSanitizerAlgorithm
https://github.com/google/sanitizers/wiki/AddressSanitizerComparisonOfMemoryTools
http://maintainablecode.logdown.com/posts/245425-valgrind-is-not-a-leak-checker
http://btorpey.github.io/blog/2014/03/27/using-clangs-address-sanitizer/
http://clang.llvm.org/docs/AddressSanitizer.html

## Debugging (L35-36)

L35:
L36:

reference: Andreas Zeller. \emph{Why Programs Fali: a Guide to Systematic Debugging.}
